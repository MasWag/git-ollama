#!/bin/sh -ue
######################################
# NAME
#  git-ollama-commit - Automatically generate a commit message for Git using ollama.
#
# SYNOPSIS
#  git-ollama-commit [--model <model>] [-m <model>] [--amend] [--help | -h]
#
# DESCRIPTION
#  The git-ollama-commit script automatically generates a commit message based on the diff of staged changes in a Git repository. It supports both standard commits and amended commits. When amending, it generates a diff that includes the changes from the previous commit along with any new staged updates. The commit message is generated by running a model via the ollama run command.
#
# OPTIONS
#
#  * -m, --model <model>: Specifies the model to use for commit message generation. The default is "mistral". For example, use --model qwen2.5 or -m qwen2.5 to specify an alternative model.
#  * --amend: Amend the previous commit using the generated commit message. With this option, the diff is calculated as the difference between the parent of HEAD and the current index, ensuring that both the previous commit and any staged changes are included.
#  * -h, --help: Display a help message and exit.
#
# USAGE
#  Upon execution, the script will:
#  # Generate a commit message using the specified model.
#  # Display the generated commit message.
#  # Prompt the user to choose whether to accept the commit message (commit), regenerate a new message, or abort the process.
#
# EXAMPLES
#
#  * Create a commit with the default model: git-ollama-commit
#  * Create a commit using an alternative model: git-ollama-commit -m qwen2.5
#  * Amend the previous commit with the generated message: git-ollama-commit --amend
#  * Display the help message: git-ollama-commit -h
#
# AUTHOR
#  Masaki Waga
#
# LICENSE
#  Apache License, Version 2.0
######################################

# Default settings
MODEL="mistral"
AMEND=false

usage() {
    cat <<EOF
Usage: $0 [--model <model>] [-m <model>] [--amend] [--help|-h]

Automatically generate a commit message using ollama.

Options:
  -m, --model <model>    Specify the model to use (default: mistral)
      --amend            Amend the previous commit with the generated message.
  -h, --help             Display this help message and exit.
EOF
    exit 0
}

# Parse command-line arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage
            ;;
        -m|--model)
            if [ -n "${2-}" ]; then
                MODEL="$2"
                shift
            else
                echo "Error: Option $1 requires an argument." >&2
                exit 1
            fi
            ;;
        --amend)
            AMEND=true
            ;;
        *)
            echo "Error: Unrecognized argument: $1" >&2
            exit 1
            ;;
    esac
    shift
done

# Create a temporary file using mktemp and ensure it is removed on exit
TMPFILE=$(mktemp /tmp/diff.XXXXXX)
trap 'rm -f "$TMPFILE"' EXIT

# Generate the diff:
# For a normal commit, use the staged changes.
# For an amend commit, use the staged changes + the previous changes.
if [ "$AMEND" = true ]; then
    git diff --cached HEAD^ > "$TMPFILE"
else
    git diff --cached > "$TMPFILE"
fi

# Function to generate a commit message using the specified model
generate_commit_message() {
    printf '/set system Generate an appropriate commit message based on the diff provided. Do not include anything other than the commit message in the response.\n\n' |
        cat - "$TMPFILE" |
        ollama run "$MODEL" |
        tee log |
        awk '/^<think>$/{think=1} !think; /^<\/think>$/{think=0}' | # We remove the think block
        awk '!/^[[:blank:]]*$/{printed = 1} printed;' # We remove initial blank lines
}

# Main loop to generate and confirm the commit message
while true; do
    commit_message=$(generate_commit_message)

    echo "--------------------------------"
    echo "Generated Commit Message:"
    echo "--------------------------------"
    echo "$commit_message"
    echo "--------------------------------"
    printf "Accept commit message? (y = commit, r = regenerate, a = abort): "
    read -r choice

    case "$choice" in
        y|Y)
            if [ "$AMEND" = true ]; then
                git commit --amend -m "$commit_message"
                echo "Commit amended."
            else
                git commit -m "$commit_message"
                echo "Commit created."
            fi
            exit 0
            ;;
        r|R)
            echo "Regenerating commit message..."
            ;;
        a|A)
            echo "Aborted."
            exit 0
            ;;
        *)
            echo "Invalid input. Please enter y, r, or a."
            ;;
    esac
done
